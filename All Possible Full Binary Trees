/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<Integer,List<TreeNode>> memo = new HashMap<>();
    public List<TreeNode> allPossibleFBT(int n) {
        if(n%2==0) return new ArrayList<>();
        List<TreeNode> list = new ArrayList<>();
        if(memo.containsKey(n)){
            return memo.get(n);
        }
        if(n==1){
           list.add(new TreeNode(0));
           return list;
        }
        for(int i=1;i<n;i=i+2){
            List<TreeNode> leftTree = allPossibleFBT(i);
            List<TreeNode> rightTree = allPossibleFBT(n-i-1);
            for(TreeNode left:leftTree){
                for(TreeNode right:rightTree){
                    TreeNode root = new TreeNode(0);
                    root.left=left;
                    root.right=right;
                    list.add(root);
                }
            }
        }
        memo.put(n,list);
        return list;   
    }
}
