class Solution {
    public int largestValsFromLabels(int[] values, int[] labels, int numWanted, int useLimit) {
      HashMap<Integer,Integer> track = new HashMap<>(); // to track use limit if label so far
        PriorityQueue<int []>pq = new PriorityQueue<>((a,b)->b[0]-a[0]);
        
        for(int i=0;i<values.length;i++){
            pq.add(new int []{values[i],labels[i]});
        }
        int score =0;
        while(numWanted !=0 && pq.size()!=0){
            int lab = pq.peek()[1];
            if(!track.containsKey(lab)){
                score += pq.poll()[0];
                track.put(lab,1);
                numWanted--;
            }
            else if(track.get(lab)<useLimit){
                score += pq.poll()[0];
                track.put(lab,track.get(lab)+1);
                numWanted--;
            }
            else{
                pq.poll();
            }
        }
        return score;
    }
}
