/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
     int count=0;
    public boolean isPalindrome(ListNode head) {
    
   
        if(head.next==null ){
            return true;
        }
        ListNode temp=head;
        ListNode mid=findMid(temp);
        ListNode h2=mid.next;
        mid.next=null;
        
        ListNode head2=reverse(h2);
        while(head2!=null){
            if(temp.val!=head2.val){
                return false;
            }
            head2=head2.next;
            temp=temp.next;
        }
        return true;
    }
    // find middle of linked list
    public ListNode findMid(ListNode temp){
        ListNode fast=temp;
       ListNode slow=temp;
       if(temp.next==null){
           return null;
       }
       while(fast.next!=null && fast.next.next!=null){
           fast=fast.next.next;
           slow=slow.next;
       }
       return slow;
    }
    //Find reverse of linked list
   public ListNode reverse(ListNode A) {
     
        ListNode cur=A;
        ListNode prev=null;
        while(cur != null){
            ListNode temp=cur.next;
            cur.next=prev;
            prev=cur;
            cur=temp;
        }
        return prev;
    }
}
