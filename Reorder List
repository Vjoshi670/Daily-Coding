/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
    if(head == null || head.next == null){
            return ;}
        ListNode mid = getMid(head);
        //2 separate list
        ListNode h2 = mid.next;
        mid.next = null;

        //reversing the second half
        h2 = getReversedLinkedList(h2);
        ListNode h1 = head;
       
        //merging node by node
        merge(h1, h2);        
    }
    public ListNode getMid(ListNode head){
        ListNode slow = head;
        ListNode fast = head;
        while(fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    public ListNode getReversedLinkedList(ListNode head){
        ListNode h1 = head;
        ListNode h2 = head.next;
        while(h2 != null){
            ListNode temp = h2.next;
            h2.next = h1;
            h1 = h2;
            h2 = temp;
        }
        head.next = null;
        return h1;
    }

public ListNode merge(ListNode h1, ListNode h2){
        ListNode head = h1;
        while(h1 != null && h2 != null){
            ListNode temp = h1.next;
            h1.next = h2;
            h2 = h2.next;
            h1.next.next = temp;
            h1 = h1.next.next;
        }

        return head;        
    }
}
