/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> q = new LinkedList();
        List<List<Integer>> ans = new ArrayList<>(); // final return ArrayList
        if(root==null){
            return ans;
        }
        q.add(root);  // adding root TreeNode to q
        while(q.size() > 0){
            int N = q.size();
            List<Integer> temp = new ArrayList<>();  // creating a new ArrayList for every level
            for(int i=0; i<N; i++){  // iterating for each level
                TreeNode t = q.peek();
                temp.add(t.val);
                q.remove();
                if(t.left != null)
                q.add(t.left);
                if(t.right != null)
                q.add(t.right);
            }
            ans.add(temp);  // adding temp ArrayList to ans ArrayList
        }
        return ans;
    }
}
