class Solution {
    int dpArr[][];
    public int minDistance(String word1, String word2) {
        dpArr=new int[word1.length()][word2.length()];
        return recursion(word1,word2,0,0);
    }
    int recursion(String A, String B, int i, int j){
        if(i==A.length()) return B.length()-j;
        if(j==B.length()) return A.length()-i;

        if(dpArr[i][j]!=0) return dpArr[i][j];

        if(A.charAt(i)==B.charAt(j)){
            dpArr[i][j]=recursion(A,B,i+1,j+1);
            return dpArr[i][j];
        }
        else{
            int ifReplaced= recursion(A,B,i+1,j+1) + 1;
            int ifDeleted= recursion(A,B,i+1,j) + 1;
            int ifInserted= recursion(A,B,i,j+1) + 1;
            dpArr[i][j]= Math.min(ifDeleted,Math.min(ifInserted,ifReplaced));
            return dpArr[i][j];
        }
    }
}
